/**
 * ‰ΩçÁΩÆ„É™„Çª„ÉÉ„Éà„ÅÆ„Ç∞„É≠„Éº„Éê„É´ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
 * Ë®≠ÂÆöÁîªÈù¢„Åã„Çâ„ÅÆ„É™„Çª„ÉÉ„Éà„ÇíFreeformActionGrid„Å´ÈÄöÁü•„Åô„Çã
 */

class PositionResetNotifier {
  private listeners: (() => Promise<void>)[] = [];

  /**
   * „É™„Çπ„Éä„Éº„ÇíÁôªÈå≤
   */
  addListener(callback: () => Promise<void>) {
    this.listeners.push(callback);
    console.log(
      "üîî [PositionResetNotifier] Listener added, total:",
      this.listeners.length,
    );
  }

  /**
   * „É™„Çπ„Éä„Éº„ÇíÂâäÈô§
   */
  removeListener(callback: () => Promise<void>) {
    const index = this.listeners.indexOf(callback);
    if (index > -1) {
      this.listeners.splice(index, 1);
      console.log(
        "üîî [PositionResetNotifier] Listener removed, total:",
        this.listeners.length,
      );
    }
  }

  /**
   * ÂÖ®„Å¶„ÅÆ„É™„Çπ„Éä„Éº„Å´‰ΩçÁΩÆ„É™„Çª„ÉÉ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°
   */
  async notifyReset() {
    console.log(
      "üì¢ [PositionResetNotifier] Notifying position reset to",
      this.listeners.length,
      "listeners",
    );

    const promises = this.listeners.map(async (callback, index) => {
      try {
        await callback();
        console.log(
          `‚úÖ [PositionResetNotifier] Listener ${index + 1} completed successfully`,
        );
      } catch (error) {
        console.error(
          `‚ùå [PositionResetNotifier] Listener ${index + 1} failed:`,
          error,
        );
      }
    });

    await Promise.all(promises);
  }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
export const positionResetNotifier = new PositionResetNotifier();
