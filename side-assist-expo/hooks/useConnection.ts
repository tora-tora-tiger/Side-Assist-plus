import { useState, useCallback, useRef, useEffect } from "react";
import { NetworkService, CustomAction } from "../services/NetworkService";
import { DeepLinkService, ConnectionParams } from "../services/DeepLinkService";
import {
  ConnectionStorageService,
  StoredConnectionInfo,
} from "../services/ConnectionStorageService";
import AlertManager from "../utils/AlertManager";

export const useConnection = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [macIP, setMacIP] = useState<string>("");
  const [macPort, setMacPort] = useState<string>("");
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState<string>("");
  const [customActions, setCustomActions] = useState<CustomAction[]>([]);
  const [isAutoReconnecting, setIsAutoReconnecting] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  // recordingStatus„Çí‰ΩøÁî®„Åó„Å¶„É≠„Ç∞„Å´Âá∫Âäõ

  const hasStartedRecording = useRef(false);
  const processedCompletedActionIds = useRef<Set<string>>(new Set());
  const connectionMonitorRef = useRef<ReturnType<typeof setInterval> | null>(
    null,
  );
  const monitoringTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(
    null,
  );
  const recordingMonitorRef = useRef<ReturnType<typeof setInterval> | null>(
    null,
  );

  // ÂàùÊúüÂåñ„ÅÆÈáçË§áÂÆüË°åÈò≤Ê≠¢Áî®„Éï„É©„Ç∞
  const initializationRef = useRef({
    isInitializing: false,
    hasInitialized: false,
    initializationId: 0,
  });

  // DeepLinkÂá¶ÁêÜ„ÅÆ„Éè„É≥„Éâ„É©„Éº
  const handleDeepLink = useCallback(async (params: ConnectionParams) => {
    // „Åæ„ÅöÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà

    const connected = await NetworkService.testConnection(
      params.ip,
      params.port,
    );
    if (!connected) {
      return;
    }

    // Êé•Á∂öÊàêÂäüÊôÇ„Å´„Çπ„ÉÜ„Éº„Éà„ÇíÊõ¥Êñ∞

    setMacIP(params.ip);
    setMacPort(params.port);
    setIsConnected(true);

    // „Éë„Çπ„ÉØ„Éº„Éâ„ÅßË™çË®º„ÇíË©¶Ë°å

    const authSuccess = await NetworkService.authenticateWithPassword(
      params.ip,
      params.port,
      params.password,
    );
    if (authSuccess) {
      setIsAuthenticated(true);
      setPassword(params.password);

      // Êé•Á∂öÊÉÖÂ†±„Çí‰øùÂ≠ò
      await saveConnectionInfo(params.ip, params.port, params.password);
    }
  }, []);

  // DeepLinkÂá¶ÁêÜ„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
  useEffect(() => {
    const subscription = DeepLinkService.initialize();
    DeepLinkService.addListener(handleDeepLink);

    return () => {
      DeepLinkService.removeListener(handleDeepLink);
      DeepLinkService.cleanup();
      subscription?.remove();
    };
  }, [handleDeepLink]);

  const loadCustomActions = useCallback(async (): Promise<void> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      return;
    }

    try {
      const actions = await NetworkService.getCustomActions(macIP, macPort);
      setCustomActions(actions);
    } catch (error) {
      console.error("Failed to load custom actions:", error);
      setCustomActions([]);
    }
  }, [macIP, macPort, isConnected, isAuthenticated]);

  const resetRecordingState = useCallback(() => {
    // ExecutionScreen„ÅÆ„Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó„Å¶„É™„Çª„ÉÉ„Éà
    if (
      typeof (window as { resetExecutionScreenRecordingState?: () => void })
        .resetExecutionScreenRecordingState === "function"
    ) {
      (window as { resetExecutionScreenRecordingState?: () => void })
        .resetExecutionScreenRecordingState!();
    } else {
      // No action needed when executionScreenRef is not available
    }
  }, []);

  const startRecordingMonitoring = useCallback(() => {
    if (recordingMonitorRef.current) {
      clearInterval(recordingMonitorRef.current);
    }

    recordingMonitorRef.current = setInterval(async () => {
      if (!macIP || !macPort) return;

      try {
        const status = await NetworkService.getRecordingStatus(macIP, macPort);

        // „Çµ„Éº„Éê„Éº„É¨„Çπ„Éù„É≥„Çπ„ÅÆÂΩ¢Âºè„Å´Âêà„Çè„Åõ„Å¶Âà§ÂÆö„Çí‰øÆÊ≠£
        const isCurrentlyRecording =
          status.isRecording || status.status === "recording";
        const isCompleted = status.status === "completed";

        // Èå≤ÁîªÂÆå‰∫ÜÁä∂ÊÖã„ÇíÊ§úÂá∫„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅÈå≤Áîª„Åó„Å¶„ÅÑ„Åü„Å®„Åø„Å™„Åó„Å¶„Ç¢„É©„Éº„Éà„ÇíË°®Á§∫
        // action_id „ÅåÂ≠òÂú®„Åó„ÄÅ„Åã„Å§Êú™Âá¶ÁêÜ„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç¢„É©„Éº„ÉàË°®Á§∫
        if (
          isCompleted &&
          status.actionId &&
          typeof status.actionId === "string"
        ) {
          // Âêå„Åò action_id „ÅÆ„Ç¢„É©„Éº„Éà„ÇíÈáçË§áË°®Á§∫„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„ÉÅ„Çß„ÉÉ„ÇØ
          if (!processedCompletedActionIds.current.has(status.actionId)) {
            // „Åì„ÅÆ action_id „ÇíÂá¶ÁêÜÊ∏à„Åø„Å®„Åó„Å¶„Éû„Éº„ÇØ
            processedCompletedActionIds.current.add(status.actionId);

            hasStartedRecording.current = false;

            const message = status.message || "Èå≤Áîª„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü";
            AlertManager.showAlert("Èå≤ÁîªÂÆå‰∫Ü", message, [
              {
                text: "OK",
                onPress: async () => {
                  resetRecordingState();
                },
              },
            ]);

            // ÂÆå‰∫ÜÁ¢∫Ë™ç„ÇíÈÄÅ‰ø°

            await NetworkService.acknowledgeRecording(macIP, macPort);

            // „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÂÅ¥„ÅÆ‰øùÂ≠òÂá¶ÁêÜÂÆå‰∫Ü„ÇíÂæÖÊ©ü„Åó„Å¶„Åã„Çâ„Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂÜçË™≠„ÅøËæº„Åø
            setTimeout(async () => {
              await loadCustomActions();
            }, 1000); // 1ÁßíÂæÖÊ©ü
          }
        } else if (isCurrentlyRecording && !hasStartedRecording.current) {
          hasStartedRecording.current = true;
        } else if (isCurrentlyRecording) {
          // Handle recording state
        } else {
          // Handle idle state
        }
      } catch (error) {
        console.error("Recording status monitoring error:", error);
      }
    }, 1000); // 1Áßí„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØ
  }, [macIP, macPort, loadCustomActions, resetRecordingState]);

  // Êé•Á∂öÊÉÖÂ†±„Çí‰øùÂ≠ò
  const saveConnectionInfo = useCallback(
    async (ip: string, port: string, password: string): Promise<void> => {
      const connectionInfo: StoredConnectionInfo = {
        ip,
        port,
        password,
        lastConnectedAt: Date.now(),
        autoReconnect: true,
      };

      await ConnectionStorageService.saveConnectionInfo(connectionInfo);
    },
    [],
  );

  const stopRecordingMonitoring = useCallback(() => {
    if (recordingMonitorRef.current) {
      clearInterval(recordingMonitorRef.current);
      recordingMonitorRef.current = null;
    }
  }, []);

  // Ë™çË®ºÊàêÂäüÊôÇ„Å´„Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíË™≠„ÅøËæº„Åø
  useEffect(() => {
    if (isAuthenticated && macIP && macPort) {
      loadCustomActions();
    } else {
      // Ë™çË®ºÂ§±ÊïóÊôÇ„ÅØ„Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„ÇØ„É™„Ç¢
      setCustomActions([]);
    }
  }, [isAuthenticated, macIP, macPort, loadCustomActions]);

  // ÂàùÊúüÂåñÊôÇ„ÅÆËá™ÂãïÊé•Á∂ö - ÈáçË§áÂÆüË°åÈò≤Ê≠¢Ê©üËÉΩ‰ªò„Åç
  useEffect(() => {
    // ÈáçË§áÂÆüË°åÈò≤Ê≠¢„ÉÅ„Çß„ÉÉ„ÇØ
    if (
      initializationRef.current.isInitializing ||
      initializationRef.current.hasInitialized
    ) {
      return;
    }

    // ÂàùÊúüÂåñÈñãÂßã„Çí„Éû„Éº„ÇØ
    const currentInitId = ++initializationRef.current.initializationId;
    initializationRef.current.isInitializing = true;

    let isCancelled = false;

    const initializeConnection = async () => {
      try {
        const storedInfo = await ConnectionStorageService.loadConnectionInfo();

        // „Ç≠„É£„É≥„Çª„É´„ÉÅ„Çß„ÉÉ„ÇØ
        if (
          isCancelled ||
          initializationRef.current.initializationId !== currentInitId
        ) {
          return;
        }

        if (!storedInfo) {
          if (!isCancelled) {
            setIsInitialized(true);
            initializationRef.current.hasInitialized = true;
          }
          return;
        }

        if (!storedInfo.autoReconnect) {
          if (!isCancelled) {
            setIsInitialized(true);
            initializationRef.current.hasInitialized = true;
          }
          return;
        }

        // „Ç≠„É£„É≥„Çª„É´„ÉÅ„Çß„ÉÉ„ÇØ
        if (
          isCancelled ||
          initializationRef.current.initializationId !== currentInitId
        ) {
          return;
        }

        setIsAutoReconnecting(true);

        const connected = await NetworkService.testConnection(
          storedInfo.ip,
          storedInfo.port,
        );

        // „Ç≠„É£„É≥„Çª„É´„ÉÅ„Çß„ÉÉ„ÇØ
        if (
          isCancelled ||
          initializationRef.current.initializationId !== currentInitId
        ) {
          return;
        }

        if (!connected) {
          if (!isCancelled) {
            setIsAutoReconnecting(false);
            setIsInitialized(true);
            initializationRef.current.hasInitialized = true;
          }
          return;
        }
        const authSuccess = await NetworkService.authenticateWithPassword(
          storedInfo.ip,
          storedInfo.port,
          storedInfo.password,
        );

        // ÊúÄÁµÇ„Ç≠„É£„É≥„Çª„É´„ÉÅ„Çß„ÉÉ„ÇØ
        if (
          isCancelled ||
          initializationRef.current.initializationId !== currentInitId
        ) {
          return;
        }

        if (authSuccess) {
          setMacIP(storedInfo.ip);
          setMacPort(storedInfo.port);
          setPassword(storedInfo.password);
          setIsConnected(true);
          setIsAuthenticated(true);

          // ÊúÄÁµÇÊé•Á∂öÊôÇÂàª„ÇíÊõ¥Êñ∞
          await ConnectionStorageService.updateLastConnectedTime();
        }

        setIsAutoReconnecting(false);
        setIsInitialized(true);
        initializationRef.current.hasInitialized = true;
      } catch (error) {
        console.error(
          `üí• [useConnection] Initialization error (init #${currentInitId}):`,
          error,
        );
        if (
          !isCancelled &&
          initializationRef.current.initializationId === currentInitId
        ) {
          setIsAutoReconnecting(false);
          setIsInitialized(true);
          initializationRef.current.hasInitialized = true;
        }
      } finally {
        // ÂàùÊúüÂåñÂÆå‰∫Ü„Çí„Éû„Éº„ÇØ
        if (initializationRef.current.initializationId === currentInitId) {
          initializationRef.current.isInitializing = false;
        }
      }
    };

    initializeConnection();

    return () => {
      isCancelled = true;
      // ÈÄ≤Ë°å‰∏≠„ÅÆÂàùÊúüÂåñ„Çí„Ç≠„É£„É≥„Çª„É´Ôºà„Åü„Å†„ÅóÂÆå‰∫Ü„Åó„Åü„ÇÇ„ÅÆ„ÅØ„É™„Çª„ÉÉ„Éà„Åó„Å™„ÅÑÔºâ
      if (
        initializationRef.current.initializationId === currentInitId &&
        initializationRef.current.isInitializing &&
        !initializationRef.current.hasInitialized
      ) {
        initializationRef.current.isInitializing = false;
      }
    };
  }, []);

  const startConnectionMonitoring = useCallback(() => {
    // Êó¢Â≠ò„ÅÆ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
    if (connectionMonitorRef.current) {
      clearInterval(connectionMonitorRef.current);
      connectionMonitorRef.current = null;
    }
    if (monitoringTimeoutRef.current) {
      clearTimeout(monitoringTimeoutRef.current);
      monitoringTimeoutRef.current = null;
    }

    // ÁèæÂú®„ÅÆIP/Port„Çí‰øùÂ≠òÔºà„ÇØ„É≠„Éº„Ç∏„É£„ÉºÂØæÁ≠ñÔºâ
    const currentIP = macIP;
    const currentPort = macPort;

    if (!currentIP || !currentPort) {
      return;
    }

    // ÂàùÊúüÊé•Á∂öÁõ¥Âæå„ÅØ10ÁßíÂæÖ„Å£„Å¶„Åã„ÇâÁõ£Ë¶ñÈñãÂßãÔºàÈáçË§áhealth check„ÇíÈÅø„Åë„ÇãÔºâ

    monitoringTimeoutRef.current = setTimeout(() => {
      const checkConnection = async () => {
        const connected = await NetworkService.testConnection(
          currentIP,
          currentPort,
        );
        setIsConnected(connected);

        if (!connected) {
          setIsConnected(false);
          setIsAuthenticated(false);
          setPassword("");
        }
      };

      connectionMonitorRef.current = setInterval(checkConnection, 10000); // 10ÁßíÈñìÈöî„Å´Âª∂Èï∑
    }, 10000);
  }, [macIP, macPort]);

  const stopConnectionMonitoring = useCallback(() => {
    if (connectionMonitorRef.current) {
      clearInterval(connectionMonitorRef.current);
      connectionMonitorRef.current = null;
    }

    if (monitoringTimeoutRef.current) {
      clearTimeout(monitoringTimeoutRef.current);
      monitoringTimeoutRef.current = null;
    }
  }, []);

  const authenticateWithPassword = useCallback(
    async (inputPassword: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected) {
        return false;
      }

      const success = await NetworkService.authenticateWithPassword(
        macIP,
        macPort,
        inputPassword,
      );
      if (success) {
        setIsAuthenticated(true);
        setPassword(inputPassword);
      } else {
        setIsAuthenticated(false);
        setPassword("");
      }
      return success;
    },
    [macIP, macPort, isConnected],
  );

  const sendText = useCallback(
    async (text: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      return await NetworkService.sendText(macIP, macPort, text, password);
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const sendCopy = useCallback(async (): Promise<boolean> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      return false;
    }

    return await NetworkService.sendAction(
      macIP,
      macPort,
      { type: "copy" },
      password,
    );
  }, [macIP, macPort, isConnected, isAuthenticated, password]);

  const sendPaste = useCallback(async (): Promise<boolean> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      return false;
    }

    return await NetworkService.sendAction(
      macIP,
      macPort,
      { type: "paste" },
      password,
    );
  }, [macIP, macPort, isConnected, isAuthenticated, password]);

  const sendGesture = useCallback(
    async (
      fingers: number,
      direction: string,
      action: string,
      actionData?: string,
    ): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      return await NetworkService.sendGesture(
        macIP,
        macPort,
        fingers,
        direction,
        action,
        actionData,
        password,
      );
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const executeCustomAction = useCallback(
    async (actionId: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      return await NetworkService.executeCustomAction(
        macIP,
        macPort,
        actionId,
        password,
      );
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const prepareRecording = useCallback(
    async (
      actionId: string,
      name: string,
      icon?: string,
      shortcutType?: "normal" | "sequential",
    ): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      const result = await NetworkService.prepareRecording(
        macIP,
        macPort,
        actionId,
        name,
        icon,
        password,
        shortcutType,
      );

      if (result) {
        // Èå≤ÁîªÊ∫ñÂÇôÊàêÂäüÊôÇ„Å´Èå≤ÁîªÁä∂ÊÖãÁõ£Ë¶ñ„ÇíÈñãÂßã
        startRecordingMonitoring();
      }

      return result;
    },
    [
      macIP,
      macPort,
      isConnected,
      isAuthenticated,
      password,
      startRecordingMonitoring,
    ],
  );

  const connectManually = useCallback(
    async (ip: string, port: string, password: string): Promise<boolean> => {
      try {
        // „Åô„Åß„Å´Êé•Á∂öÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØÈáçË§áÂá¶ÁêÜ„ÇíÈò≤„Åê
        if (isConnected && isAuthenticated && macIP === ip) {
          return true;
        }

        const connected = await NetworkService.testConnection(ip, port);
        if (!connected) {
          return false;
        }

        const authSuccess = await NetworkService.authenticateWithPassword(
          ip,
          port,
          password,
        );
        if (authSuccess) {
          setMacIP(ip);
          setMacPort(port);
          setPassword(password);
          setIsConnected(true);
          setIsAuthenticated(true);

          // Êé•Á∂öÊÉÖÂ†±„Çí‰øùÂ≠ò
          await saveConnectionInfo(ip, port, password);

          return true;
        } else {
          return false;
        }
      } catch (error) {
        console.error("[useConnection] Manual connection error:", error);
        return false;
      }
    },
    [isConnected, isAuthenticated, macIP, saveConnectionInfo],
  );

  const disconnect = useCallback(
    async (
      clearStoredInfo: boolean = false,
      resetInitialization: boolean = false,
    ) => {
      // ÂÖ®„Å¶„ÅÆÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢
      stopConnectionMonitoring();
      stopRecordingMonitoring();

      // Êé•Á∂öÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setIsConnected(false);
      setIsAuthenticated(false);
      setMacIP("");
      setMacPort("");
      setPassword("");

      // Èå≤ÁîªÈñ¢ÈÄ£„ÅÆÁä∂ÊÖã„ÇÇ„É™„Çª„ÉÉ„Éà
      hasStartedRecording.current = false;
      processedCompletedActionIds.current.clear();

      // ÂàùÊúüÂåñÁä∂ÊÖã„ÅÆ„É™„Çª„ÉÉ„ÉàÔºàÊâãÂãïÂàáÊñ≠ÊôÇ„Å™„Å©Ôºâ
      if (resetInitialization) {
        initializationRef.current.isInitializing = false;
        initializationRef.current.hasInitialized = false;
        initializationRef.current.initializationId++;
        setIsInitialized(false);
        setIsAutoReconnecting(false);
      }

      // „Ç™„Éó„Ç∑„Éß„É≥„Åß‰øùÂ≠ò„Åï„Çå„ÅüÊé•Á∂öÊÉÖÂ†±„Çí„ÇØ„É™„Ç¢
      if (clearStoredInfo) {
        await ConnectionStorageService.clearConnectionInfo();
      }
    },
    [stopConnectionMonitoring, stopRecordingMonitoring],
  );

  return {
    isConnected,
    macIP,
    macPort,
    isAuthenticated,
    password,
    customActions,
    isAutoReconnecting,
    isInitialized,
    startConnectionMonitoring,
    stopConnectionMonitoring,
    sendText,
    sendCopy,
    sendPaste,
    sendGesture,
    executeCustomAction,
    prepareRecording,
    resetRecordingState,
    loadCustomActions,
    authenticateWithPassword,
    connectManually,
    disconnect,
    clearStoredConnection: () => ConnectionStorageService.clearConnectionInfo(),
    // ÈñãÁô∫Áî®ÔºöÂàùÊúüÂåñÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà„Åó„Å¶ÂÜçÊé•Á∂ö„ÇíË©¶Ë°å
    resetAndRetryConnection: useCallback(async () => {
      // ÂàùÊúüÂåñÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      initializationRef.current.isInitializing = false;
      initializationRef.current.hasInitialized = false;
      initializationRef.current.initializationId++;

      // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setIsInitialized(false);
      setIsAutoReconnecting(false);

      // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâËá™ÂãïÊé•Á∂ö„ÇíÂÜçË©¶Ë°å
      setTimeout(async () => {
        try {
          const storedInfo =
            await ConnectionStorageService.loadConnectionInfo();
          if (storedInfo && storedInfo.autoReconnect) {
            // useEffect„ÅåÂÜçÂÆüË°å„Åï„Çå„Çã„Çà„ÅÜ„Å´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
            setIsInitialized(false);
          }
        } catch (error) {
          console.error("‚ùå [useConnection] Retry connection error:", error);
        }
      }, 100);
    }, []),
  };
};
