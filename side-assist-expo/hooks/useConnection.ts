import { useState, useCallback, useRef, useEffect } from "react";
import { NetworkService, CustomAction } from "../services/NetworkService";
import { DeepLinkService, ConnectionParams } from "../services/DeepLinkService";
import AlertManager from "../utils/AlertManager";

export const useConnection = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [macIP, setMacIP] = useState<string>("");
  const [macPort, setMacPort] = useState<string>("");
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState<string>("");
  const [customActions, setCustomActions] = useState<CustomAction[]>([]);
  const [recordingStatus, setRecordingStatus] = useState<
    "idle" | "recording" | "completed"
  >("idle");
  // recordingStatus„Çí‰ΩøÁî®„Åó„Å¶„É≠„Ç∞„Å´Âá∫Âäõ
  console.log("Current recording status:", recordingStatus);
  const hasStartedRecording = useRef(false);
  const processedCompletedActionIds = useRef<Set<string>>(new Set());
  const connectionMonitorRef = useRef<ReturnType<typeof setInterval> | null>(
    null,
  );
  const monitoringTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(
    null,
  );
  const recordingMonitorRef = useRef<ReturnType<typeof setInterval> | null>(
    null,
  );

  // DeepLinkÂá¶ÁêÜ„ÅÆ„Éè„É≥„Éâ„É©„Éº
  const handleDeepLink = useCallback(async (params: ConnectionParams) => {
    console.log("üîó [useConnection] handleDeepLink START - params:", params);
    console.log(
      "üö® [useConnection] This function should be called ONLY ONCE per QR scan!",
    );

    // „Åæ„ÅöÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà
    console.log("üîó [useConnection] Calling NetworkService.testConnection...");
    const connected = await NetworkService.testConnection(
      params.ip,
      params.port,
    );
    if (!connected) {
      console.log(
        "‚ùå [useConnection] Cannot reach server at:",
        `${params.ip}:${params.port}`,
      );
      return;
    }

    // Êé•Á∂öÊàêÂäüÊôÇ„Å´„Çπ„ÉÜ„Éº„Éà„ÇíÊõ¥Êñ∞
    console.log("üîó [useConnection] Setting connection state...");
    setMacIP(params.ip);
    setMacPort(params.port);
    setIsConnected(true);

    console.log(
      "‚úÖ [useConnection] Connected to server:",
      `${params.ip}:${params.port}`,
    );

    // „Éë„Çπ„ÉØ„Éº„Éâ„ÅßË™çË®º„ÇíË©¶Ë°å
    console.log(
      "üîó [useConnection] Calling NetworkService.authenticateWithPassword...",
    );
    const authSuccess = await NetworkService.authenticateWithPassword(
      params.ip,
      params.port,
      params.password,
    );
    if (authSuccess) {
      setIsAuthenticated(true);
      setPassword(params.password);
      console.log(
        "üéâ [useConnection] QR code connection and authentication successful!",
      );
    } else {
      console.log(
        "‚ùå [useConnection] Authentication failed with provided password",
      );
    }
    console.log("üîó [useConnection] handleDeepLink END");
  }, []);

  // DeepLinkÂá¶ÁêÜ„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
  useEffect(() => {
    const subscription = DeepLinkService.initialize();
    DeepLinkService.addListener(handleDeepLink);

    return () => {
      DeepLinkService.removeListener(handleDeepLink);
      DeepLinkService.cleanup();
      subscription?.remove();
    };
  }, [handleDeepLink]);

  const loadCustomActions = useCallback(async (): Promise<void> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      console.log("‚ö†Ô∏è Cannot load custom actions - missing connection info:", {
        macIP: !!macIP,
        macPort: !!macPort,
        isConnected,
        isAuthenticated,
      });
      return;
    }

    try {
      console.log(`üìã Loading custom actions from ${macIP}:${macPort}...`);
      const actions = await NetworkService.getCustomActions(macIP, macPort);
      console.log(
        `üì¶ Received ${actions.length} custom actions:`,
        actions.map(a => ({
          id: a.id,
          name: a.name,
          keys: a.key_sequence.length,
        })),
      );
      setCustomActions(actions);
    } catch (error) {
      console.error("Failed to load custom actions:", error);
      setCustomActions([]);
    }
  }, [macIP, macPort, isConnected, isAuthenticated]);

  const resetRecordingState = useCallback(() => {
    console.log("üîÑ Resetting recording UI state for next recording");
    // ExecutionScreen„ÅÆ„Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó„Å¶„É™„Çª„ÉÉ„Éà
    if (
      typeof (window as { resetExecutionScreenRecordingState?: () => void })
        .resetExecutionScreenRecordingState === "function"
    ) {
      console.log("üéØ Calling ExecutionScreen reset function...");
      (window as { resetExecutionScreenRecordingState?: () => void })
        .resetExecutionScreenRecordingState!();
    } else {
      console.log("‚ö†Ô∏è ExecutionScreen reset function not found");
    }
  }, []);

  const stopRecordingMonitoring = useCallback(() => {
    if (recordingMonitorRef.current) {
      clearInterval(recordingMonitorRef.current);
      recordingMonitorRef.current = null;
      console.log("üé• Recording status monitoring stopped");
    }
  }, []);

  // Ë™çË®ºÊàêÂäüÊôÇ„Å´„Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíË™≠„ÅøËæº„Åø
  useEffect(() => {
    if (isAuthenticated && macIP && macPort) {
      console.log("üîê Authentication successful, loading custom actions...");
      loadCustomActions();
    } else {
      // Ë™çË®ºÂ§±ÊïóÊôÇ„ÅØ„Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„ÇØ„É™„Ç¢
      setCustomActions([]);
    }
  }, [isAuthenticated, macIP, macPort, loadCustomActions]);

  const startConnectionMonitoring = useCallback(() => {
    console.log(
      "üîç [useConnection] startConnectionMonitoring called with IP:",
      macIP,
      "Port:",
      macPort,
    );

    // Êó¢Â≠ò„ÅÆ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
    if (connectionMonitorRef.current) {
      console.log("üîç [useConnection] Clearing existing monitor interval");
      clearInterval(connectionMonitorRef.current);
      connectionMonitorRef.current = null;
    }
    if (monitoringTimeoutRef.current) {
      console.log("üîç [useConnection] Clearing existing monitor timeout");
      clearTimeout(monitoringTimeoutRef.current);
      monitoringTimeoutRef.current = null;
    }

    // ÁèæÂú®„ÅÆIP/Port„Çí‰øùÂ≠òÔºà„ÇØ„É≠„Éº„Ç∏„É£„ÉºÂØæÁ≠ñÔºâ
    const currentIP = macIP;
    const currentPort = macPort;

    if (!currentIP || !currentPort) {
      console.log(
        "‚ùå [useConnection] Cannot start monitoring - missing IP or Port",
      );
      return;
    }

    // ÂàùÊúüÊé•Á∂öÁõ¥Âæå„ÅØ10ÁßíÂæÖ„Å£„Å¶„Åã„ÇâÁõ£Ë¶ñÈñãÂßãÔºàÈáçË§áhealth check„ÇíÈÅø„Åë„ÇãÔºâ
    console.log(
      "üîç [useConnection] Delaying monitoring start by 10 seconds to avoid duplicate health checks...",
    );

    monitoringTimeoutRef.current = setTimeout(() => {
      const checkConnection = async () => {
        console.log(
          "üîç [useConnection] Periodic health check - calling testConnection...",
        );
        const connected = await NetworkService.testConnection(
          currentIP,
          currentPort,
        );
        setIsConnected(connected);

        if (!connected) {
          console.log("üîå [useConnection] Connection lost");
          setIsConnected(false);
          setIsAuthenticated(false);
          setPassword("");
        }
      };

      connectionMonitorRef.current = setInterval(checkConnection, 10000); // 10ÁßíÈñìÈöî„Å´Âª∂Èï∑
      console.log(
        "üîç [useConnection] Connection monitoring started with 10s interval (after delay)",
      );
    }, 10000);
  }, [macIP, macPort]);

  const stopConnectionMonitoring = useCallback(() => {
    console.log("üõë [useConnection] Stopping connection monitoring...");

    if (connectionMonitorRef.current) {
      clearInterval(connectionMonitorRef.current);
      connectionMonitorRef.current = null;
      console.log("üõë [useConnection] Cleared monitoring interval");
    }

    if (monitoringTimeoutRef.current) {
      clearTimeout(monitoringTimeoutRef.current);
      monitoringTimeoutRef.current = null;
      console.log("üõë [useConnection] Cleared monitoring timeout");
    }

    console.log("üõë [useConnection] Connection monitoring stopped");
  }, []);

  const authenticateWithPassword = useCallback(
    async (inputPassword: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected) {
        return false;
      }

      const success = await NetworkService.authenticateWithPassword(
        macIP,
        macPort,
        inputPassword,
      );
      if (success) {
        setIsAuthenticated(true);
        setPassword(inputPassword);
        console.log("‚úÖ Authentication successful");
      } else {
        setIsAuthenticated(false);
        setPassword("");
        console.log("‚ùå Authentication failed");
      }
      return success;
    },
    [macIP, macPort, isConnected],
  );

  const sendText = useCallback(
    async (text: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      return await NetworkService.sendText(macIP, macPort, text, password);
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const sendCopy = useCallback(async (): Promise<boolean> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      return false;
    }

    return await NetworkService.sendAction(
      macIP,
      macPort,
      { type: "copy" },
      password,
    );
  }, [macIP, macPort, isConnected, isAuthenticated, password]);

  const sendPaste = useCallback(async (): Promise<boolean> => {
    if (!macIP || !macPort || !isConnected || !isAuthenticated) {
      return false;
    }

    return await NetworkService.sendAction(
      macIP,
      macPort,
      { type: "paste" },
      password,
    );
  }, [macIP, macPort, isConnected, isAuthenticated, password]);

  const sendGesture = useCallback(
    async (
      fingers: number,
      direction: string,
      action: string,
      actionData?: string,
    ): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        console.log(
          "‚ùå [useConnection] sendGesture failed - not connected/authenticated",
        );
        return false;
      }

      return await NetworkService.sendGesture(
        macIP,
        macPort,
        fingers,
        direction,
        action,
        actionData,
        password,
      );
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const executeCustomAction = useCallback(
    async (actionId: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      return await NetworkService.executeCustomAction(
        macIP,
        macPort,
        actionId,
        password,
      );
    },
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const prepareRecording = useCallback(
    async (actionId: string, name: string, icon?: string): Promise<boolean> => {
      if (!macIP || !macPort || !isConnected || !isAuthenticated) {
        return false;
      }

      const result = await NetworkService.prepareRecording(
        macIP,
        macPort,
        actionId,
        name,
        icon,
        password,
      );

      if (result) {
        // Èå≤ÁîªÊ∫ñÂÇôÊàêÂäüÊôÇ„Å´Èå≤ÁîªÁä∂ÊÖãÁõ£Ë¶ñ„ÇíÈñãÂßã
        startRecordingMonitoring();
      }

      return result;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [macIP, macPort, isConnected, isAuthenticated, password],
  );

  const startRecordingMonitoring = useCallback(() => {
    if (recordingMonitorRef.current) {
      clearInterval(recordingMonitorRef.current);
    }

    console.log("üé• Starting recording status monitoring...");

    recordingMonitorRef.current = setInterval(async () => {
      if (!macIP || !macPort) return;

      try {
        const status = await NetworkService.getRecordingStatus(macIP, macPort);
        console.log("üé• Recording status check:", status);

        // „Çµ„Éº„Éê„Éº„É¨„Çπ„Éù„É≥„Çπ„ÅÆÂΩ¢Âºè„Å´Âêà„Çè„Åõ„Å¶Âà§ÂÆö„Çí‰øÆÊ≠£
        const isCurrentlyRecording =
          status.isRecording || status.status === "recording";
        const isCompleted = status.status === "completed";

        // Èå≤ÁîªÂÆå‰∫ÜÁä∂ÊÖã„ÇíÊ§úÂá∫„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅÈå≤Áîª„Åó„Å¶„ÅÑ„Åü„Å®„Åø„Å™„Åó„Å¶„Ç¢„É©„Éº„Éà„ÇíË°®Á§∫
        // action_id „ÅåÂ≠òÂú®„Åó„ÄÅ„Åã„Å§Êú™Âá¶ÁêÜ„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç¢„É©„Éº„ÉàË°®Á§∫
        if (
          isCompleted &&
          status.actionId &&
          typeof status.actionId === "string"
        ) {
          // Âêå„Åò action_id „ÅÆ„Ç¢„É©„Éº„Éà„ÇíÈáçË§áË°®Á§∫„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„ÉÅ„Çß„ÉÉ„ÇØ
          if (!processedCompletedActionIds.current.has(status.actionId)) {
            console.log(
              "üéâ Recording completed for new action:",
              status.actionId,
            );

            // „Åì„ÅÆ action_id „ÇíÂá¶ÁêÜÊ∏à„Åø„Å®„Åó„Å¶„Éû„Éº„ÇØ
            processedCompletedActionIds.current.add(status.actionId);

            hasStartedRecording.current = false;
            setRecordingStatus("completed");

            const message = status.message || "Èå≤Áîª„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü";
            AlertManager.showAlert("Èå≤ÁîªÂÆå‰∫Ü", message, [
              {
                text: "OK",
                onPress: async () => {
                  console.log("‚úÖ User acknowledged recording completion");
                  resetRecordingState();
                },
              },
            ]);

            // ÂÆå‰∫ÜÁ¢∫Ë™ç„ÇíÈÄÅ‰ø°
            console.log("‚úÖ Sending acknowledgment...");
            await NetworkService.acknowledgeRecording(macIP, macPort);

            // „Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂÜçË™≠„ÅøËæº„ÅøÔºàÊñ∞„Åó„Åè‰øùÂ≠ò„Åï„Çå„Åü„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂèçÊò†Ôºâ
            console.log(
              "üîÑ Reloading custom actions after recording completion...",
            );
            await loadCustomActions();
          } else {
            console.log(
              "üîÑ Already processed completion for action:",
              status.actionId,
            );
          }
        } else if (isCurrentlyRecording && !hasStartedRecording.current) {
          console.log("üî¥ Recording started!");
          hasStartedRecording.current = true;
          setRecordingStatus("recording");
        } else if (isCurrentlyRecording) {
          console.log("üî¥ Still recording...");
        } else {
          console.log("‚ö™ Recording idle");
        }
      } catch (error) {
        console.error("Recording status monitoring error:", error);
      }
    }, 1000); // 1Áßí„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØ
  }, [macIP, macPort, loadCustomActions, resetRecordingState]);

  const connectManually = useCallback(
    async (ip: string, port: string, password: string): Promise<boolean> => {
      try {
        console.log("üîó [useConnection] connectManually START with IP:", ip);
        console.log(
          "üîó [useConnection] Current state - isConnected:",
          isConnected,
          "isAuthenticated:",
          isAuthenticated,
        );

        // „Åô„Åß„Å´Êé•Á∂öÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØÈáçË§áÂá¶ÁêÜ„ÇíÈò≤„Åê
        if (isConnected && isAuthenticated && macIP === ip) {
          console.log(
            "‚ö†Ô∏è [useConnection] Already connected and authenticated to this IP, skipping",
          );
          return true;
        }

        const connected = await NetworkService.testConnection(ip, port);
        if (!connected) {
          console.log("‚ùå [useConnection] Cannot reach server");
          return false;
        }

        const authSuccess = await NetworkService.authenticateWithPassword(
          ip,
          port,
          password,
        );
        if (authSuccess) {
          console.log("‚úÖ [useConnection] Setting connection state...");
          setMacIP(ip);
          setMacPort(port);
          setPassword(password);
          setIsConnected(true);
          setIsAuthenticated(true);
          console.log("‚úÖ [useConnection] Manual connection successful");
          return true;
        } else {
          console.log("‚ùå [useConnection] Authentication failed");
          return false;
        }
      } catch (error) {
        console.error("[useConnection] Manual connection error:", error);
        return false;
      }
    },
    [isConnected, isAuthenticated, macIP],
  );

  const disconnect = useCallback(() => {
    console.log("üîå [useConnection] disconnect START");

    // ÂÖ®„Å¶„ÅÆÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢
    stopConnectionMonitoring();
    stopRecordingMonitoring();

    // Êé•Á∂öÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    setIsConnected(false);
    setIsAuthenticated(false);
    setMacIP("");
    setMacPort("");
    setPassword("");

    // Èå≤ÁîªÈñ¢ÈÄ£„ÅÆÁä∂ÊÖã„ÇÇ„É™„Çª„ÉÉ„Éà
    hasStartedRecording.current = false;
    processedCompletedActionIds.current.clear();
    setRecordingStatus("idle");

    console.log("üîå [useConnection] Connection disconnected and state reset");
    console.log("üîå [useConnection] disconnect END");
  }, [stopConnectionMonitoring, stopRecordingMonitoring]);

  return {
    isConnected,
    macIP,
    macPort,
    isAuthenticated,
    password,
    customActions,
    startConnectionMonitoring,
    stopConnectionMonitoring,
    sendText,
    sendCopy,
    sendPaste,
    sendGesture,
    executeCustomAction,
    prepareRecording,
    resetRecordingState,
    loadCustomActions,
    authenticateWithPassword,
    connectManually,
    disconnect,
  };
};
